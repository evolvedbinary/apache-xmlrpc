<?xml version="1.0"?>

<document>
  <properties>
    <title>Server</title>
    <author email="hannes@helma.at">Hannes Wallnofer</author>
  </properties>

  <body>
    <section name="Server-side XML-RPC">
      <p>
      On the server side, you can either embed the XML-RPC library into an existing
server framework, or use the built-in special purpose HTTP server. Let's
first look at how to register handler objects to tell an XML-RPC server how to
map incoming requests to actual methods.
      </p>
    </section>
    <section name="XML-RPC Handler Objects">
    <p>
          The <a href="/xmlrpc/apidocs/org/apache/xmlrpc/XmlRpcServer.html">
org.apache.xmlrpc.XmlRpcServer</a> and <a href="/xmlrpc/apidocs/org/apache/xmlrpc/WebServer.html">
org.apache.xmlrpc.WebServer</a> classes provide methods that let your register and
unregister Java objects as XML-RPC handlers:</p>

<pre> addHandler (String name, Object handler);
 removeHandler (String name);</pre>

<p>Depending on what kind of handler object you give to the server, it will do
one of the following things:</p>

<ol>
  <li>
    If you pass the XmlRpcServer any Java object, the server will
    try to resolve incoming calls via object introspection, i.e. by
    looking for public methods in the handler object corresponding to
    the method name and the parameter types of incoming requests.
    The input parameters of incoming XML-RPC requests must match the argument types of the Java method
    (see <a href="types.html">conversion table</a>), or otherwise the method
    won't be found. The return value of the Java method must be supported
    by XML-RPC.
  </li>

  <li>
    If you pass the XmlRpcServer an object that implements interface
    <a href="/xmlrpc/apidocs/org/apache/xmlrpc/XmlRpcHandler.html">
    org.apache.xmlrpc.XmlRpcHandler</a> or
    <a href="/xmlrpc/apidocs/org/apache/xmlrpc/AuthenticatedXmlRpcHandler.html">
    org.apache.xmlrpc.AuthenticatedXmlRpcHandler</a> the execute() method
    will be called for every incoming request. You are then in full control
    of how to process the XML-RPC request, enabling you to perform input and output
    parameter checks and conversion, special error handling etc.
  </li>
</ol>

<p>In both cases, incoming requests will be interpreted as
<tt>handlerName.methodName</tt> with <tt>handlerName</tt> being the String
that the handler has been registered with, and <tt>methodName</tt> being the
name of the method to be invoked. You can work around this scheme by
registering a handler with the name "$default". In this case you can
drop the <tt>handlerName.</tt> part from the method name.
    </p>
    </section>
    <section name="Using XML-RPC within a Servlet environment">
      <p>
      The XML-RPC library can be embedded into any Web server framework that supports
reading HTTP POSTs from an InputStream. The typical code for processing an
incoming XML-RPC request looks like this:</p>

<pre> XmlRpcServer xmlrpc = new XmlRpcServer ();
 xmlrpc.addHandler ("examples", new ExampleHandler ());
 ...
 byte[] result = xmlrpc.execute (request.getInputStream ());
 response.setContentType ("text/xml");
 response.setContentLength (result.length());
 OutputStream out = response.getOutputStream();
 out.write (result);
 out.flush ();</pre>

<p>Note that the <tt>execute</tt> method does not throw any exception, since all
errors are encoded into the XML result that will be sent back to the client.
A full example servlet is included in the package.

There is a sample XML-RPC Servlet included in the library. You can use it as a
starting point for your own needs.

      </p>
    </section>
    <section name="Using the Built-in HTTP Server">
      <p>
      The XML-RPC library comes with its own built-in HTTP server. This is not a general
purpose web server, its only purpose is to handle XML-RPC requests.
The HTTP server can be embedded in any Java application with a few
simple lines:</p>

<pre> WebServer webserver = new WebServer (port);
 webserver.addHandler ("examples", someHandler);</pre>

<p>You can also start the web server from the command line by typing:</p>

<pre> java org.apache.xmlrpc.WebServer</pre>

<p>You can specify the server port, but there's no way to manipulate RPC handlers in
command line mode, so you'll either have to modify WebServer.java for your purposes
or embed it into your own application. A special bonus when using the built in Web
server is that you can set the IP addresses of clients from which to accept or
deny requests. This is done via the following methods:</p>

<pre> webserver.setParanoid (true);
 // deny all clients
 webserver.acceptClient ("192.168.0.*"); // allow local access
 webserver.denyClient ("192.168.0.3"); // except for this one
 ...
 webserver.setParanoid (false); // disable client filter</pre>

<p>If the client filter is activated, entries to the deny list always override those in
the accept list. Thus, <tt>webserver.denyClient ("*.*.*.*")</tt> would
completely disable the web server.</p>

<p>Note that the XML-RPC client in Frontier 5 has its requests hard-coded to URI /RPC2.
To work with these clients, you have to configure your server environment to respond
to /RPC2. This should be fixed in a newer version.
      </p>
    </section>
  </body>
</document>

<!--
Ideas: 

o A section describing the bundled handlers, including a new
<code>system.multicall</code> handler.

http://www.xmlrpc.com/discuss/msgReader$1208

-->
